// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotoForge.Infrastructure.Database;

#nullable disable

namespace PhotoForge.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240201174741_BaseGalleryMigration")]
    partial class BaseGalleryMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GalleryUser", b =>
                {
                    b.Property<Guid>("GalleryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersWithAccessId")
                        .HasColumnType("uuid");

                    b.HasKey("GalleryId", "UsersWithAccessId");

                    b.HasIndex("UsersWithAccessId");

                    b.ToTable("GalleryUser");
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Auth.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastRefresh")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSession", "Auth");
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Galleries.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gallery", "Galleries");
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Galleries.GalleryResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GalleryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("GalleryResource", "Galleries");
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("User", "User");
                });

            modelBuilder.Entity("GalleryUser", b =>
                {
                    b.HasOne("PhotoForge.Core.Features.Galleries.Gallery", null)
                        .WithMany()
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoForge.Core.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWithAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Auth.UserSession", b =>
                {
                    b.HasOne("PhotoForge.Core.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("PhotoForge.Core.ValueObjects.Token", "RefreshToken", b1 =>
                        {
                            b1.Property<Guid>("UserSessionId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserSessionId");

                            b1.ToTable("UserSession", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("UserSessionId");
                        });

                    b.OwnsOne("PhotoForge.Core.ValueObjects.Token", "Token", b1 =>
                        {
                            b1.Property<Guid>("UserSessionId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserSessionId");

                            b1.ToTable("UserSession", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("UserSessionId");
                        });

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("Token")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Galleries.Gallery", b =>
                {
                    b.OwnsOne("PhotoForge.Core.ValueObjects.HashedValue", "AccessCode", b1 =>
                        {
                            b1.Property<Guid>("GalleryId")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("GalleryId");

                            b1.ToTable("Gallery", "Galleries");

                            b1.WithOwner()
                                .HasForeignKey("GalleryId");
                        });

                    b.Navigation("AccessCode");
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Galleries.GalleryResource", b =>
                {
                    b.HasOne("PhotoForge.Core.Features.Galleries.Gallery", "Gallery")
                        .WithMany("Resources")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PhotoForge.Core.ValueObjects.Resource", "PrimaryResource", b1 =>
                        {
                            b1.Property<Guid>("GalleryResourceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Location")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GalleryResourceId");

                            b1.ToTable("GalleryResource", "Galleries");

                            b1.WithOwner()
                                .HasForeignKey("GalleryResourceId");
                        });

                    b.OwnsOne("PhotoForge.Core.ValueObjects.Resource", "ThumbnailResource", b1 =>
                        {
                            b1.Property<Guid>("GalleryResourceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Location")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GalleryResourceId");

                            b1.ToTable("GalleryResource", "Galleries");

                            b1.WithOwner()
                                .HasForeignKey("GalleryResourceId");
                        });

                    b.Navigation("Gallery");

                    b.Navigation("PrimaryResource")
                        .IsRequired();

                    b.Navigation("ThumbnailResource");
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Users.User", b =>
                {
                    b.OwnsOne("PhotoForge.Core.ValueObjects.HashedValue", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("PhotoForge.Core.ValueObjects.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("PhotoForge.Core.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User", "User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoForge.Core.Features.Galleries.Gallery", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
